# contains all needed parameters for all files

dt: 0.25
random_seed: 2
config_file: '/home/adam/probcoll/robots/rccar/params_rccar.yaml' # Should just be this file
exp_dir: '/home/adam/probcoll/experiments/rccar'
exp_name: 'bair_car_cory2'

##########################
### Probcoll algorithm ###
##########################

probcoll:
  T: 28 # timesteps per trajectory
  max_iter: 300
  asynchronous_training: True
  control_noise:
    type: 'uniform' # zero / gaussian / uniform

    zero: {}
    gaussian:
      std: [3.0, 0.3]
    uniform:
      lower: [-5., 0.]
      upper: [5., 0.]

  # TODO not used
  epsilon_greedy:
    epsilon: 0.1
    control_range:
      lower: [20., 16.]
      upper: [80., 16.]

  label_with_noise: True # if false, saves desired controls (i.e. without control_noise)
  validation_noise: False
#  init_data: '/home/adam/gps_quadrotor/experiments/rccar/init_data_real'
#  init_epochs: 100

  conditions:
    repeats: 5 # TODO
    num_test: 1
    randomize_conds: False
    randomize_reps: True

    default:
      cmd_steer: [49.5]
      cmd_vel: [0.]

    range:
      cmd_vel:
        min: [0]
        max: [0]
        num: [1]

    perturb: # repetition perturbations
      cmd_vel: [0.]
    
######################
### Probcoll model ###
######################
    
model:
  T: 6 # how many timesteps to predict

  control_range:
    lower: [0., -17.]
    upper: [99., 17.]
  
  # what to use as input to prediction model
  X_order: []
  U_order: ['cmd_steer', 'cmd_vel']
  O_order: ['camera']
  output_order: ['collision'] # taken from observations O

  # NN training parameters
  device: 0
  gpu_fraction: 0.8 #TODO
  reset_every_train: False # every time train is called, reinitialize weights?
  learning_rate: 0.001
  beta1: 0.9 # For Adam
  beta2: 0.999 # For Adam
  batch_size: 16
  display_batch: 100 
  val_freq: 90 # How often you compute validation
  val_steps: 10  # How many steps you do on validation 
  steps: 1000
  val_pct: 0.2

  # How to save tfrecords
  save_type: 'fixedlen' # fixedlen
  
  dtype: 'float32'
  reg: 0.0
  num_bootstrap: 1
  prob_coll_strictly_increasing: True # True / False 
  mask: 'all' # all / last

  observation_graph:
    graph_type: 'cnn'
    filters: [4, 4, 4]
    kernels: [3, 3, 3]
    strides: [2, 2, 2]
    padding: 'VALID' 
    conv_activation: 'relu' 
    output_activation: 'tanh'

#  action_graph:
#    graph_type: 'fc' # fc / rnn
#    hidden_layers: [16, 16]
#    output_dim: 24 # Has to be divisible by T
#    hidden_activation: 'relu'
#    dropout: 0.9
  
  action_graph:
    graph_type: 'rnn' # fc / rnn
    num_cells: 1
    # TODO num_units isnt used because we use cnn output size as num_units
#    num_units: 16 # state_size
    cell_type: 'mulint_rnn' #rnn / mulint_rnn
    dropout: 0.9 # pct keep
#    cell_args: # If you need to pass variables to cells 

  output_graph: # Must have dropout 1.0
    graph_type: 'fc' # fc / rnn

#################################################
### Planning objective and optimizer settings ###
#################################################

planning:
  cost:
    coll_cost:
      cost: square # square
      weight: [0., 1000.] # TODO
    
    control_cost:
      des: [49.5, 16.] # TODO: hard-coded order: steering then speed
      cost: square
      weight: [1., 1.] # [0.0001, 0.2]
    # TODO uncertainty
#    pre_activation: True # wether std is before or after activation (sigmoid)
  
  num_dp: 16 # number of dropout passes to average over
  planner_type: 'cem' # random / primitives / cem
  # specific to your primitives code
  primitives:
    steers: [40., 45., 50., 55., 60.]
    speeds: [16.]
    num_steers: 6

  # control range for your planning algorithms
  control_range:
    lower: [40., 16.]
    upper: [60., 16.]

  random:
    K: 512 # number of actions to sample from

  cem:
    init_M: 1024 # number of actions to sample from
    M: 128
    K: 16 # top actions you select
    num_iters: 3 # does not include first sample    
    eps: 0.001 # to ensure covariance is PD

  # TODO: other planning methods here

#############
### World ###
#############

world:
#  plot: False
  randomize: True
  sim: True 
  do_back_up: False

  back_up:
    cmd_steer: [44.5, 54.5]
    cmd_vel: -12
    duration: 3.

sim:
  srv: 'sim_env'
  sim_env: 'hallway' # hallway / cory2
  launch_file: '/home/adam/probcoll/robots/rccar/ros/launch/car_srv_sim.launch'
  dt: 0.25
  steeringClamp: 45.0
  engineClamp: 1000.0
  mass: 800.0
  first_person: True

######################################################
########### States, controls, observations ###########
######################################################

X:
  dim: 9
  order: ['cmd_steer', 'cmd_vel', 'position', 'orientation']

  cmd_steer: {idx: 0, dim: 1, min: 0, max: 100}
  cmd_vel: {idx: 1, dim: 1, min: 6}
  position: {idx: 2, dim: 3}
  orientation: {idx: 5, dim: 4}

U:
  dim: 2
  order: ['cmd_steer', 'cmd_vel']

  cmd_steer: {idx: 0, dim: 1, min: 0, max: 100}
  cmd_vel: {idx: 1, dim: 1, min: 6}

O:
  use_depth: True
  
  dim: 577
  order: ['camera', 'collision']

  camera:
    idx: 0
    dim: 576
    height: 32
    width: 18
    num_channels: 1
    noise: 0.01
  collision: {idx: 576, dim: 1, buffer: 0.0}

##################
### ros topics ###
##################

rccar:
  topics:
    camera: 'image' # sensor_msgs/Image
    depth: 'depth' # sensor_msgs/Image
    cmd_steer: 'cmd/steer' # std_msgs/Float32
    cmd_vel: 'cmd/vel' # std_msgs/Float32
    pred_image: 'prediction/image'
    collision: 'crash' # std_msgs/Empty
    good_rollout: 'good_rollout' # std_msgs/Empty
    bad_rollout: 'bad_rollout' # std_msgs/Empty
    teleop_cmd_steer: 'teleop_cmd/steer' # std_msgs/Float32
    teleop_cmd_vel: 'teleop_cmd/motor' # std_msgs/Float32
    reset: 'reset' #std_msgs/Empty

    # below topics that are just recorded
    cmd_motor: 'cmd/motor'
    encoder: 'encoder'
    motor: 'motor'
    state: 'state'
    steer: 'steer'
    vel: 'vel'
    # and for debugging
    debug_cost: 'debug_cost' # visualization_msgs/MarkerArray
    debug_cost_probcoll: 'debug_cost_probcoll' # visualization_msgs/MarkerArray

# contains all needed parameters for all files

dt: 0.25
random_seed: 0
exp_dir: '/home/avillaflor/probcoll/experiments/rccar'
exp_name: 'bair_car_hallway_grad_clip'

##########################
### Probcoll algorithm ###
##########################

probcoll:
  T: 24 # timesteps per trajectory
  logger: 'debug' # debug/info/fatal what level to log
  max_iter: 10
  label_with_noise: True # if false, saves desired controls (i.e. without control_noise)
  
  # Training
  training_start_iter: 0
  is_training: True
  asynchronous_training: False

  # Conditions
  conditions:
    repeats: 40 # TODO
    num_test: 1
    randomize_conds: False
    randomize_reps: True

    default:
      cmd_steer: [49.5]
      cmd_vel: [0.]

    range:
      cmd_vel:
        min: [0]
        max: [0]
        num: [1]

    perturb: # repetition perturbations
      cmd_vel: [0.]
    
######################
### Probcoll model ###
######################
    
model:
  T: 12 # how many timesteps to predict
  logger: 'debug' # debug/info/warning/fatal what level to log
  
  # what to use as input to prediction model
  U_order: ['cmd_steer', 'cmd_vel']
  O_im_order: ['camera'] # / 'back_camera'
  O_vec_order: []
  output_order: ['collision'] # taken from observations O
  num_O: 4
  
  # Normalize input  
  center_O_im: False 
  control_range:
    lower: [0., -17.]
    upper: [99., 17.]
  
  # Device
  device: 0
  gpu_fraction: 0.4 #TODO async both processes use same device and gpu fraction

  # Optimization
  learning_rate: 1.e-4
  grad_clip: 10.0
  beta1: 0.9 # For avillaflor
  beta2: 0.999 # For avillaflor
  batch_size: 64
  pct_coll: 0.75 # rebalancing trajectories
  coll_weight_pct: 0.5 # reweight collision and no collision samples in cost
  reg: 1.e-6
  
  # Train schedule
  steps: 1000
  reset_freq: 2 # 0 means no resetting
  reset_steps: 10000
  display_steps: 100 
  val_pct: 0.1 # Percent of the data stored as validation
  val_freq: 0.1 # How often you compute validation (percentage)
  val_steps: 10  # How many steps you do on validation 
  val_dropout: False

  # Model architecture
  dtype: 'float32' # only float32 is currently implemented
  num_bootstrap: 1
  prob_coll_strictly_increasing: True # True / False 
  mask: 'all' # all / last

  image_graph:
    graph_type: 'cnn'
    filters: [32, 64, 64]
    kernels: [8, 4, 3]
    strides: [4, 2, 1]
    padding: 'SAME' 
    use_batch_norm: True
    conv_activation: 'relu'
    output_activation: 'relu' # relu / tanh/ spatial_softmax 
  
  observation_graph:
    hidden_activation: 'tanh' 
    output_dim: 256 # This is the hidden size of the rnn
  
  action_graph:
    graph_type: 'rnn' # fc / rnn
    num_cells: 1
    cell_type: 'mulint_lstm' #rnn / mulint_rnn
    dropout: 0.8 # pct keep
#    cell_args: # If you need to pass variables to cells 

  output_graph: # Must have dropout 1.0
    graph_type: 'fc' # fc / rnn

#################################################
### Planning objective and optimizer settings ###
#################################################

planning:
  cost:
    coll_cost:
      cost: square # square
      weight: [0., 10.] # TODO
      std_weight: 0.0
      pre_activation: True # wether std is before or after activation (sigmoid)
    
    control_cost:
      des: [49.5, 8.] # TODO: hard-coded order: steering then speed
      cost: square
      weight: [0.0, 1.0]     

  # Planner
  planner_type: 'random' # random / primitives / cem / random_policy
  num_dp: 8 # number of dropout passes to average over during planning
  # specific to your primitives code
  primitives:
    steers: [30., 40., 50., 60., 70.]
    speeds: [16.]
    num_splits: 3

  # control range for your planning algorithms
  control_range:
    lower: [20., 8.]
    upper: [80., 8.]

  random:
    K: 2048 # number of actions to sample from

  cem:
    init_M: 1024 # number of actions to sample from
    M: 256
    K: 16 # top actions you select
    num_iters: 4 # does not include first sample    
    eps: 0.01 # to ensure covariance is PD

  # Noise / exploration
  epsilon_greedy:
    endpoints: [[0, 1.0], [50, 1.0], [150, 0.01]]
    #    endpoints: [[0, 1.0], [25, 1.0], [250, 0.1], [500, 0.01]]
    outside_value: 0.01
    lower: [20., 8.]
    upper: [80., 8.]

  control_noise:
    type: 'uniform' # zero / gaussian / uniform

    zero: {}
    gaussian:
      std: [3.0, 0.3]
    uniform:
      lower: [-5., 0.]
      upper: [5., 0.]
  
  # Visualization
  visualize: False
  topics:
    debug_cost: 'debug_cost' # visualization_msgs/MarkerArray
    debug_cost_probcoll: 'debug_cost_probcoll' # visualization_msgs/MarkerArray
  
#############
### World ###
#############

world:
#  plot: False
  logger: 'info' # debug/info/fatal what level to log for world and agent
  randomize: True
  sim: True 
  do_back_up: False
#  do_back_up: True

  back_up:
    cmd_steer: [44.5, 54.5]
    cmd_vel: -12
    duration: 3.0

  testing:
    itr_freq: 2
    positions: []
#    positions: [[0., 0., -0.6, 0.0]] 
#    positions: [[-95., 0., -0.6], [-80., 60., -0.6], [13., 48., -0.6], [0., -20., -0.6]]
#    positions: [[40., -35., 0.2], [-40., -35., 0.2], [40., 20., 0.2], [-40., 20., 0.2]]
#    positions: [[40., -40., 0.2], [40., 20., 0.2]]
#    positions: [[40., 20., 0.2]]
#    position_ranges: [[[40., -40., 0.2, 0.0], [40., 40., 0.2, 6.28]]]
    position_ranges: [[[-4., 0., -0.6, 3.14], [4., 0., -0.6, 3.14]]]
    num_pos: 5
    range_type: 'fix_spacing' # fix_spacing / random

sim:
  srv: 'sim_env'
  sim_path: '/home/avillaflor/probcoll/robots/rccar/ros/catkin_ws/src/bair_car/nodes/' # hallway / square
  sim_env: 'hallway' # hallway / square
  config_file: '/home/avillaflor/probcoll/robots/rccar/params_rccar.yaml' # Should just be this file
  dt: 0.25
  steeringClamp: 45.0
  accelClamp: 12.0
  mass: 800.0
  first_person: True
  p: 2000.0
  i: 0.0
  d: 0.0

######################################################
########### States, controls, observations ###########
######################################################

X:
  dim: 9
  order: ['cmd_steer', 'cmd_vel', 'position', 'orientation']

  cmd_steer: {idx: 0, dim: 1, min: 0, max: 100}
  cmd_vel: {idx: 1, dim: 1, min: 6}
  position: {idx: 2, dim: 3}
  orientation: {idx: 5, dim: 4}

U:
  dim: 2
  order: ['cmd_steer', 'cmd_vel']

  cmd_steer: {idx: 0, dim: 1, min: 0, max: 100}
  cmd_vel: {idx: 1, dim: 1, min: 6}

O:
  use_depth: True

  dim: 4610
  order: ['camera', 'back_camera', 'vel', 'collision']

  camera:
    idx: 0
    dim: 2304
    height: 64
    width: 36
    num_channels: 1
    noise: 0.01
  back_camera:
    idx: 2304
    dim: 2304
    height: 64
    width: 36
    num_channels: 1
    noise: 0.01
  vel: {idx: 4608, dim: 1}
  collision: {idx: 4609, dim: 1, buffer: 0.0}

##################
### ros topics ###
##################

rccar:
  topics:
    camera: 'image' # sensor_msgs/Image
    depth: 'depth' # sensor_msgs/Image
    cmd_steer: 'cmd/steer' # std_msgs/Float32
    cmd_vel: 'cmd/vel' # std_msgs/Float32
    pred_image: 'prediction/image'
    collision: 'crash' # std_msgs/Empty
    good_rollout: 'good_rollout' # std_msgs/Empty
    bad_rollout: 'bad_rollout' # std_msgs/Empty
    teleop_cmd_steer: 'teleop_cmd/steer' # std_msgs/Float32
    teleop_cmd_vel: 'teleop_cmd/motor' # std_msgs/Float32
    reset: 'reset' #std_msgs/Empty

    # below topics that are just recorded
    cmd_motor: 'cmd/motor'
    encoder: 'encoder'
    motor: 'motor'
    state: 'state'
    steer: 'steer'
    vel: 'vel'
    # and for debugging
    debug_cost: 'debug_cost' # visualization_msgs/MarkerArray
    debug_cost_probcoll: 'debug_cost_probcoll' # visualization_msgs/MarkerArray

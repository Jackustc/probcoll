// Generated by gencpp from file bair_car/sim_envRequest.msg
// DO NOT EDIT!


#ifndef BAIR_CAR_MESSAGE_SIM_ENVREQUEST_H
#define BAIR_CAR_MESSAGE_SIM_ENVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bair_car
{
template <class ContainerAllocator>
struct sim_envRequest_
{
  typedef sim_envRequest_<ContainerAllocator> Type;

  sim_envRequest_()
    : steer(0.0)
    , motor(0.0)
    , vel(0.0)
    , reset(false)  {
    }
  sim_envRequest_(const ContainerAllocator& _alloc)
    : steer(0.0)
    , motor(0.0)
    , vel(0.0)
    , reset(false)  {
  (void)_alloc;
    }



   typedef float _steer_type;
  _steer_type steer;

   typedef float _motor_type;
  _motor_type motor;

   typedef float _vel_type;
  _vel_type vel;

   typedef uint8_t _reset_type;
  _reset_type reset;




  typedef boost::shared_ptr< ::bair_car::sim_envRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bair_car::sim_envRequest_<ContainerAllocator> const> ConstPtr;

}; // struct sim_envRequest_

typedef ::bair_car::sim_envRequest_<std::allocator<void> > sim_envRequest;

typedef boost::shared_ptr< ::bair_car::sim_envRequest > sim_envRequestPtr;
typedef boost::shared_ptr< ::bair_car::sim_envRequest const> sim_envRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bair_car::sim_envRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bair_car::sim_envRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bair_car

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bair_car::sim_envRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bair_car::sim_envRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bair_car::sim_envRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bair_car::sim_envRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bair_car::sim_envRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bair_car::sim_envRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bair_car::sim_envRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "607013531ceb4010e22e1a175f27b233";
  }

  static const char* value(const ::bair_car::sim_envRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x607013531ceb4010ULL;
  static const uint64_t static_value2 = 0xe22e1a175f27b233ULL;
};

template<class ContainerAllocator>
struct DataType< ::bair_car::sim_envRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bair_car/sim_envRequest";
  }

  static const char* value(const ::bair_car::sim_envRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bair_car::sim_envRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
float32 steer\n\
float32 motor\n\
float32 vel\n\
bool reset\n\
";
  }

  static const char* value(const ::bair_car::sim_envRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bair_car::sim_envRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steer);
      stream.next(m.motor);
      stream.next(m.vel);
      stream.next(m.reset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sim_envRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bair_car::sim_envRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bair_car::sim_envRequest_<ContainerAllocator>& v)
  {
    s << indent << "steer: ";
    Printer<float>::stream(s, indent + "  ", v.steer);
    s << indent << "motor: ";
    Printer<float>::stream(s, indent + "  ", v.motor);
    s << indent << "vel: ";
    Printer<float>::stream(s, indent + "  ", v.vel);
    s << indent << "reset: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BAIR_CAR_MESSAGE_SIM_ENVREQUEST_H

# contains all needed parameters for all files

random_seed: 0
exp_dir: '/home/bding/Desktop/code/experiments/sim_rccar'
exp_name: 'cylinder_depth'

##########################
### Probcoll algorithm ###
##########################

probcoll:
  dt: 0.25
  T: 40 # timesteps per trajectory
  logger: 'debug' # debug/info/fatal what level to log
  max_iter: 20
  label_with_noise: True # if false, saves desired controls (i.e. without control_noise)
  
  # Training
  training_start_iter: 0
  is_training: True # EXPERIMENTAL
  asynchronous_training: False # EXPERIMENTAL

  # Conditions
  num_rollouts: 20

  testing:
    num_rollout: 20
    itr_freq: 4
  init_data: /home/bding/Desktop/code/probcoll/init_car
######################
### Probcoll model ###
######################
    
model:
  T: 8 #how many timesteps to predict
  logger: 'info' # debug/info/warning/fatal what level to log
  
  # What to use as input to prediction model
  U_order: ['cmd_steer', 'cmd_vel']
  O_im_order: ['camera'] # 'camera' / 'back_camera'
  O_vec_order: []
  output_order: ['collision'] # taken from observations O
  num_O: 4
  
  # Normalize input  
  center_O_im: False 
  control_range:
    lower: [-45., -4.]
    upper: [45., 4.]
  
  # Device
  device: 0
  gpu_fraction: 0.8

  # Optimization
  learning_rate: 5.e-4
  grad_clip: 5.0 # Norm gradient clip
  beta1: 0.9 # For avillaflor
  beta2: 0.999 # For avillaflor
  batch_size: 64
  pct_coll: 0.75 # rebalancing trajectories
  coll_weight_pct: 0.5 # reweight collision and no collision samples in cost
  reg: 1.e-3 # L2 regularization
  
  # Train schedule
  steps: 500
  reset_freq: 0 # 0 means no resetting
  reset_steps: 5000
  display_steps: 50 
  val_pct: 0.1 # Percent of the data stored as validation
  val_freq: 0.1 # How often you compute validation (percentage)
  val_steps: 5  # How many steps you do on validation 
  val_dropout: True # Whether you use dropout during validation

  # Model architecture
  dtype: 'float32' # only float32 is currently implemented
  num_bootstrap: 1 # EXPERIMENTAL
  prob_coll_strictly_increasing: True # True / False 
  mask: 'all' # all / last

  image_graph:
    graph_type: 'cnn'
    filters: [32, 64, 64]
    kernels: [8, 4, 3]
    strides: [4, 2, 1]
    padding: 'SAME' 
    use_batch_norm: False
    batch_norm_decay: 0.5
    conv_activation: 'relu'
    output_activation: 'relu' # relu / tanh/ spatial_softmax 
  
  observation_graph:
    output_activation: 'tanh'
    output_dim: 128 # This is the hidden size of the rnn
  
  action_graph:
    graph_type: 'rnn'
    num_cells: 1
    cell_type: 'mulint_lstm' # rnn / mulint_rnn / lstm / mulint_lstm
#    dropout: 1.0 # pct keep
#    cell_args: # If you need to pass variables to cells 

  output_graph: 
    graph_type: 'fc'
 
#################################################
### Planning objective and optimizer settings ###
#################################################

planning:
  cost:
    coll_cost:
      cost: square # square
      weight: [0., 10.] 
      std_weight: 0.0 # EXPERIMENTAL
      pre_activation: True # EXPERIMENTAL wether std is before or after activation (sigmoid)
    
    control_cost:
      des: [0.0, 2.] # TODO: hard-coded order: steering then speed
      cost: square # square
      weight: [0.0, 1.0]     

  # Planner
  planner_type: 'random' # random / cem / random_policy
  num_dp: 1 # number of dropout passes to average over during planning
  # control range for your planning algorithms
  control_range:
    lower: [-15., 1.]
    upper: [15., 1.]

  random:
    K: 32 # number of actions to sample from

  cem:
    init_M: 2048 # number of actions to sample from
    M: 256
    K: 16 # top actions you select
    num_additional_iters: 3 # does not include first sample    
    warm_start:
      init_M: 1024 # number of actions to sample from
      M: 256
      K: 16 # top actions you select
      num_additional_iters: 1 # does not include first sample    
    eps: 0.01 # to ensure covariance is PD

  # Noise / exploration
  epsilon_greedy:
    endpoints: [[0, 1.0], [20, 1.0], [200, 0.1], [360, 0.01]]
    outside_value: 0.01

  control_noise:
    type: 'uniform' # zero / gaussian / uniform

    zero: {}
    gaussian:
      std: [3.0, 0.3]
    uniform:
      lower: [-5., 0.]
      upper: [5., 0.]
  
  # Visualization
  visualize: True # EXPERIMENTAL
  topics:
    debug_cost: 'debug_cost' # visualization_msgs/MarkerArray
    debug_cost_probcoll: 'debug_cost_probcoll' # visualization_msgs/MarkerArray
  
###################
### Environment ###
###################

sim:
  sim_env: 'cylinder' # square / square_banked / cylinder
  visualize: False
  use_vel: True
  use_back_cam: True
  use_depth: True
  accelClamp: 2.0
  mass: 10.0
  p: 1.25
  d: 0.0
  size: [64, 36]

  do_back_up: False
  back_up:
    steer: [-5., 5.]
    vel: -1.
    duration: 4.0

######################################################
########### States, controls, observations ###########
######################################################

X:
  dim: 7
  order: ['position', 'orientation', 'velocity']

  position: {idx: 0, dim: 3}
  orientation: {idx: 3, dim: 3}
  velocity: {idx: 6, dim: 1}
U:
  dim: 2
  order: ['cmd_steer', 'cmd_vel']

  cmd_steer: {idx: 0, dim: 1}
  cmd_vel: {idx: 1, dim: 1}

O:
  dim: 4609
  order: ['camera', 'back_camera', 'collision']

  camera:
    idx: 0
    dim: 2304
    height: 36
    width: 64
    num_channels: 1
  back_camera:
    idx: 2304
    dim: 2304
    height: 36
    width: 64
    num_channels: 1
  collision: {idx: 4608, dim: 1, buffer: 0.0}

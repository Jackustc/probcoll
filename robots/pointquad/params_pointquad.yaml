# contains all needed parameters for all files

dt: 0.2
random_seed: 0


exp_dir: '/home/bding/Desktop/probcoll/experiments/pointquad'
exp_name: 'test'

##########################
### Probcoll algorithm ###
##########################

probcoll:
  T: 30 # timesteps per trajectory
  max_iter: 10
  planner_type: 'primitives' # primitives / cem / ilqr / randomwalk / randomcontrolset

  dyn_noise: [0.01, 0.01, 0.] # how much noise added in dynamics
  control_noise:
    type: 'gaussian' # zero / gaussian / OU / smoothedgaussian

    zero: {}
    gaussian:
      std: [0.1, 0.1, 0]
    smoothedgaussian:
      std: [0.1, 0.1, 0]
      T: 30
    ou:
      std: [0.1, 0.1, 0]
      mean: [0.25, 0.0, 0.0]
      theta: 0.15


  label_with_noise: True # if false, saves desired controls (i.e. without dyn_noise)
  obs_noise: True # boolean use noise or not

#  init_data: '/home/gkahn/code/gps_quadrotor/experiments/pointquad/data'

  use_ground_truth: False
  use_init_cost: True # TODO
  epsilon_greedy: 0

  cost:
    weight: 1e5
    eval_cost: 'speed * speed * sigmoid(probs_mean + 0.0*probs_std)'
    pre_activation: True

  conditions:
    repeats: 1
    num_test: 1
    randomize_conds: False
    randomize_reps: True

    default:
      position: [0, 0, 0.5]
      orientation: [1, 0, 0, 0]
      linearvel: [0., 0, 0]
      angularvel: [0, 0, 0]

    range:
      position:
        min: [0, -0.8, 0.5] # TODO
        max: [0, 0.8, 0.5] # TODO
        num: [1, 20, 1] # TODO

    perturb: # repetition perturbations
      position: [0.1, 0.1, 0.0] # TODO
      orientation: [0., 0., 0.] # rpy
      linearvel: [0.0, 0.0, 0.]
      angularvel: [0.0, 0.0, 0.0]

######################
### Probcoll model ###
######################

model:
  T: 6 # how many timesteps to predict

  control_range:
    lower: [0., 0., 0.]
    upper: [0.5, 0.5, 0.]

  # what to use as input to prediction model
  X_order: []
  U_order: ['linearvel']
  O_order: ['camera']
  output_order: ['collision'] # taken from observations O

  # NN training parameters
  device: 0
  gpu_fraction: 0.8
  reset_every_train: True # every time train is called, reinitialize weights?
  early_stopping: False # if True, only saves model each epoch if it's the lowest cost on validation for all epochs
  learning_rate: 0.001
  batch_size: 16
  display_batch: 20
  steps: 2500
  val_freq: 250
  val_steps: 200
  val_pct: 0.2

  # How to save tfrecords
  save_type: 'fixedlen' # varlen / fixedlen

  num_bootstrap: 1 # TODO
  dropout: 0.7 # pct keep (None if no dropout)
  reg: 0.
  num_dropout_passes: 10
  prob_coll_strictly_increasing: True
  recurrent: False
  mask: "last"

  observation_graph:
    graph_type: "cnn"
    filters: [4, 4, 4]
    kernels: [3, 3, 3]
    strides: [2, 2, 2]
    padding: "VALID" 
    conv_activation: "relu" 
    output_activation: "None"
       
  action_graph:
    graph_type: 'fc' # fc
    hidden_layers: [20, 20]
    output_dim: 1
    hidden_activation: "relu"
    output_activation: "None"
    # TODO remove redundant dropout
    dropout: 0.7 # pct keep (None if no dropout)
  output_graph:
    graph_type: 'fc'
    hidden_layers: []
    output_dim: 1
    hidden_activation: "None"
    output_activation: "None"
    dropout: 0.7
#################################################
### Planning objective and optimizer settings ###
#################################################

planning:
  cost_velocity:
    velocity: [0.5, 0., 0.]
    weights: [1., 0.0, 0.]

  primitives:
    num_angles: 19
    num_speeds: 10

# TODO: other planning methods here

#############
### World ###
#############

world:
  view_rave: False
  plot: False
  randomize: False

  obstacles:
    - type: cylinder
      center: [1., 0., 0.5]
      radius: 0.2
      height: 0.4
      texture: # png
      color: [1, 0, 0]

######################################################
########### States, controls, observations ###########
######################################################

X:
  dim: 13
  order: ['position', 'orientation', 'linearvel', 'angularvel']

  position:    {idx: 0,  dim: 3}
  orientation: {idx: 3,  dim: 4} # wxyz
  linearvel:   {idx: 7,  dim: 3}
  angularvel:  {idx: 10, dim: 3}

U:
  dim: 3
  order: ['linearvel']

  linearvel: {idx: 0, dim: 3}

O:
  dim: 297
  order: ['camera', 'cage', 'collision'] # 'camera', 'cage', 'laserscan', 'signed_distance'

  camera:
    idx: 0
    dim: 256
    height: 16
    width: 16
    noise: 0.01
  cage:
    idx: 256
    dim: 40
    range: 1.5
  collision: {idx: 296, dim: 1, buffer: 0.0}

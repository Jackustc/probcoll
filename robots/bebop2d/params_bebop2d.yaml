# contains all needed parameters for all files

dt: 0.5
random_seed: 0
exp_dir: '/home/bding/Desktop/adam_code/probcoll/experiments/bebop2d'
exp_name: 'test'

  ##########################
### Probcoll algorithm ###
##########################

probcoll:
  T: 10 # timesteps per trajectory
  max_iter: 10
  logger: 'debug' # debug/info/fatal what level to log
  asychronous_training: False
  dyn_noise: [0.01, 0.01, 0.] # how much noise added in dynamics
  control_noise:
    type: 'gaussian' # zero / gaussian / OU / smoothedgaussian

    zero: {}
    gaussian:
      std: [0.0, 0.05, 0]
    smoothedgaussian:
      std: [0.0, 0.1, 0]
      T: 30
    ou:
      std: [0.1, 0.1, 0]
      mean: [0.25, 0.0, 0.0]
      theta: 0.15


  label_with_noise: True # if false, saves desired controls (i.e. without dyn_noise)
  validation_noise: False
  obs_noise: True # boolean use noise or not

#  init_data: '/home/gkahn/code/gps_quadrotor/experiments/pointquad/data'

  use_ground_truth: False
  use_init_cost: False # TODO
  epsilon_greedy: 0
  
  conditions:
    repeats: 1 # TODO
    num_test: 1
    randomize_conds: False
    randomize_reps: True

    default:
      linearvel: [0., 0, 0.0]

    range:
      linearvel:
        min: [0, -0.5, 0]
        max: [0.5, 0.5, 0]
        num: [1, 12, 1]

    perturb: # repetition perturbations
      linearvel: [0.0, 0.0, 0.0]

##########################################
########## Training environment ##########
##########################################

world:
  logger: 'debug' # debug/info/fatal what level to log for world and agent
  view_rave: False
  plot: False
  randomize: True
##################################
####### Probcoll model ###########
##################################

model:
  T: 6 # how many timesteps to predict
  logger: 'debug' # debug/info/fatal what level to log
  center_O: False
  control_range:
    lower: [0, -0.5, -1.57]
    upper: [0.3, 0.5, 1.57]

  X_order: []
  U_order: ['linearvel']
  O_im_order: ['camera']
  O_vec_order: []

  output_order: ['collision'] # taken from observations O

  # NN training parameters
  early_stopping: False # if True, only saves model each epoch if it's the lowest cost on validation for all epochs
  device: 0
  gpu_fraction: 0.8 #TODO
  reset_every_train: False # every time train is called, reinitialize weights?
  learning_rate: 0.001
  beta1: 0.9 # For Adam
  beta2: 0.999 # For Adam
  batch_size: 16
  display_steps: 100
  val_freq: 90 # How often you compute validation
  val_steps: 10  # How many steps you do on validation 
  steps: 1000
  val_pct: 0.2

  # how to resample data
#  aggregate_save_data: True # put all data into one file?
  save_type: 'fixedlen' # varlen / fixedlen
  dtype: 'float32'
  num_bootstrap: 1 # TODOTotal 0 (delta 0), reused 0 (delta 0)

  reg: 0.0001
  prob_coll_strictly_increasing: True
  mask: 'all' # all / last

  image_graph:
    graph_type: 'cnn'
    filters: [4, 4, 4]
    kernels: [3, 3, 3]
    strides: [2, 2, 2]
    padding: 'SAME'
    use_batch_norm: True
    conv_activation: 'relu'
    output_activation: 'relu'
  observation_graph:
    hidden_activation: 'tanh'
    output_dim: 64

# TODO example fc action graph
#  action_graph:
#    graph_type: 'fc' # fc / rnn
#    hidden_layers: [16, 16]
#    output_dim: 24 # Has to be divisible by T
#    hidden_activation: 'relu'
#    dropout: 0.7
  
  action_graph:
    graph_type: 'rnn' # fc / rnn
    num_cells: 1
#     # TODO num_units isnt used because we use cnn output size as num_units
# #    num_units: 16 # state_size
    cell_type: 'mulint_rnn' #rnn / mulint_rnn
    dropout: 0.9 # pct keep
# #    cell_args: # If you need to pass variables to cells

  output_graph: # Must have dropout 1.0
    graph_type: 'fc' # fc / rnn

#################################################
### Planning objective and optimizer settings ###
#################################################

planning:
  cost:
    coll_cost:
      cost: square # square
      weight: [100, 0., 0.] # TODO
    
    control_cost:
      des: [0.3, 0., 0.] # TODO: hard-coded order: steering then speed
      cost: square
      weight: [1., 1., 1.]
      # TODO uncertainty
#    pre_activation: True # wether std is before or after activation (sigmoid)

  epsilon_greedy:
    epsilon: 0.0
    lower: [0.5, -0.5, 0]
    upper: [0.5, 0.5, 0]


  control_noise:
    type: 'uniform' # zero / gaussian / uniform
    zero: {}
    gaussian:
      std: [0.1, 0.1, 0]
    uniform:
      lower: [0.0, -0.5, 0]
      upper: [0.0, 0.5, 0]

  num_dp: 16 # number of dropout passes to average over
  planner_type: 'random' # random / primitives / cem
  
  control_range:
    lower: [0.3, -0.5, 0]
    upper: [0.3, 0.5, 0]

  random:
    K: 512 # number of actions to sample from

######################################################
########### States, controls, observations ###########
######################################################

X:
  dim: 3
  order: ['linearvel']

  linearvel: {idx: 0, dim: 3}
#  dim: 13
#  order: ['position', 'orientation', 'linearvel', 'angularvel']
#
#  position:    {idx: 0,  dim: 3}
#  orientation: {idx: 3,  dim: 4} # wxyz
#  linearvel:   {idx: 7,  dim: 3}
#  angularvel:  {idx: 10, dim: 3}

U:
  dim: 3
  order: ['linearvel']

  linearvel: {idx: 0, dim: 3}

O:
  dim: 257
  order: ['camera', 'collision']

  camera: # TODO
    num_channels: 1
    idx: 0
    dim: 256
    height: 16
    width: 16
    noise: 0.01
  collision: {idx: 256, dim: 1, buffer: 0.0}

##################
### ros topics ###
##################

bebop:
  topics:
    image: '/bebop/image_raw' # sensor_msgs/Image
    cmd_vel: '/vservo/cmd_vel' # geometry_msgs/Twist
    measured_vel: '/bebop/states/ardrone3/PilotingState/SpeedChanged' # bebop_msgs/Ardrone3PilotingStateSpeedChanged
    cmd_acc: '/bebop/cmd_vel' # geometry_msgs/Twist

    collision: '/bebop/collision' # std_msgs/Empty
    start_rollout: '/bebop/start_rollout' # std_msgs/Empty
    bad_rollout: '/bebop/bad_rollout' # std_msgs/Empty

    debug_image: '/bebop/debug/image' # sensor_msgs/Image
    debug_cmd_vel: '/bebop/debug/cmd_vel' # visualization_msgs/Marker
